{"ast":null,"code":"var _jsxFileName = \"/home/alex/IT-INCUBATOR/todolist/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './AddItemForm';\nimport ButtonAppBar from \"./ButtonAppBar\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\nimport { RemoveTodoListAC, todolistsReducer } from \"./store/todolists-reducers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  function removeTask(id, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n\n    tasks[todolistId] = todolistTasks.filter(t => t.id !== id); // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    }; //достанем нужный массив по todolistId:\n\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n\n    tasks[todolistId] = [task, ...todolistTasks]; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function changeFilter(value, todolistId) {\n    let todolist = todolists.find(tl => tl.id === todolistId);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodolists([...todolists]);\n    }\n  }\n\n  function changeStatus(id, isDone, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.isDone = isDone; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function changeTaskTitle(id, newTitle, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.title = newTitle; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function removeTodolist(id) {\n    todolistsReducer(todolists, RemoveTodoListAC(id)); // setTodolists(todolists.filter(tl => tl.id !== id));\n    // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n\n    delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTodolist(title) {\n    let newTodolistId = v1();\n    let newTodolist = {\n      id: newTodolistId,\n      title: title,\n      filter: 'all'\n    };\n    setTodolists([newTodolist, ...todolists]);\n    setTasks({ ...tasks,\n      [newTodolistId]: []\n    });\n  }\n\n  function changeTodolistTitle(id, title) {\n    // найдём нужный todolist\n    const todolist = todolists.find(tl => tl.id === id);\n\n    if (todolist) {\n      // если нашёлся - изменим ему заголовок\n      todolist.title = title;\n      setTodolists([...todolists]);\n    }\n  }\n\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useDispatch([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fixed: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(AddItemForm, {\n          addItem: addTodolist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: todolists.map(tl => {\n          let allTodolistTasks = tasks[tl.id];\n          let tasksForTodolist = allTodolistTasks;\n          if (tl.filter === \"active\") tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n          if (tl.filter === \"completed\") tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              style: {\n                padding: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Todolist, {\n                id: tl.id,\n                title: tl.title,\n                tasks: tasksForTodolist,\n                removeTask: removeTask,\n                changeFilter: changeFilter,\n                addTask: addTask,\n                changeTaskStatus: changeStatus,\n                filter: tl.filter,\n                removeTodolist: removeTodolist,\n                changeTaskTitle: changeTaskTitle,\n                changeTodolistTitle: changeTodolistTitle\n              }, tl.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"PQOyjdi94GtSF5FISJiqK72Frs0=\", true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alex/IT-INCUBATOR/todolist/src/App.tsx"],"names":["React","useState","Todolist","v1","AddItemForm","ButtonAppBar","Container","Grid","Paper","RemoveTodoListAC","todolistsReducer","App","removeTask","id","todolistId","todolistTasks","tasks","filter","t","setTasks","addTask","title","task","isDone","changeFilter","value","todolist","todolists","find","tl","setTodolists","changeStatus","changeTaskTitle","newTitle","removeTodolist","addTodolist","newTodolistId","newTodolist","changeTodolistTitle","todolistId1","todolistId2","useDispatch","padding","map","allTodolistTasks","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport ButtonAppBar from \"./ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {RemoveTodoListAC, todolistsReducer} from \"./store/todolists-reducers\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function removeTodolist(id: string) {\r\n        todolistsReducer(todolists, RemoveTodoListAC(id));\r\n        // setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useDispatch<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding:'20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\")tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false)\r\n                        if (tl.filter === \"completed\")tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true)\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}