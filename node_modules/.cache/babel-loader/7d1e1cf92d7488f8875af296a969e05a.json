{"ast":null,"code":"var _jsxFileName = \"/home/alex/IT-INCUBATOR/todolist/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './AddItemForm';\nimport ButtonAppBar from \"./ButtonAppBar\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  function removeTask(id, todolistId) {\n    //достанем нужный массив по todolistId:\n    // let todolistTasks = tasks[todolistId];\n    // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n    tasks[todolistId] = tasks[todolistId].filter(t => t.id !== id); // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    }; //достанем нужный массив по todolistId:\n\n    let todolistTasks = tasks[todolistId]; // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n\n    tasks[todolistId] = [task, ...todolistTasks]; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function changeStatus(id, isDone, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.isDone = isDone; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function changeTaskTitle(id, newTitle, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId]; // найдём нужную таску:\n\n    let task = todolistTasks.find(t => t.id === id); //изменим таску, если она нашлась\n\n    if (task) {\n      task.title = newTitle; // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function removeTodolist(id) {\n    // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\n    setTodolists(todolists.filter(tl => tl.id !== id)); // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n\n    delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTodolist(title) {\n    let newTodolistId = v1();\n    let newTodolist = {\n      id: newTodolistId,\n      title: title,\n      filter: 'all'\n    };\n    setTodolists([newTodolist, ...todolists]);\n    setTasks({ ...tasks,\n      [newTodolistId]: []\n    });\n  }\n\n  function changeTodolistTitle(id, title) {\n    // найдём нужный todolist\n    const todolist = todolists.find(tl => tl.id === id);\n\n    if (todolist) {\n      // если нашёлся - изменим ему заголовок\n      todolist.title = title;\n      setTodolists([...todolists]);\n    }\n  }\n\n  function changeFilter(value, todolistId) {\n    let todolist = todolists.find(tl => tl.id === todolistId);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodolists([...todolists]);\n    }\n  }\n\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fixed: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(AddItemForm, {\n          addItem: addTodolist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: todolists.map(tl => {\n          let allTodolistTasks = tasks[tl.id];\n          let tasksForTodolist = allTodolistTasks;\n          if (tl.filter === \"active\") tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n          if (tl.filter === \"completed\") tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              style: {\n                padding: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Todolist, {\n                id: tl.id,\n                title: tl.title,\n                tasks: tasksForTodolist,\n                removeTask: removeTask,\n                changeFilter: changeFilter,\n                addTask: addTask,\n                changeTaskStatus: changeStatus,\n                filter: tl.filter,\n                removeTodolist: removeTodolist,\n                changeTaskTitle: changeTaskTitle,\n                changeTodolistTitle: changeTodolistTitle\n              }, tl.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"oBqIIHMLlQKmdIMJ9W2fTLh0yUs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alex/IT-INCUBATOR/todolist/src/App.tsx"],"names":["React","useState","Todolist","v1","AddItemForm","ButtonAppBar","Container","Grid","Paper","App","removeTask","id","todolistId","tasks","filter","t","setTasks","addTask","title","task","isDone","todolistTasks","changeStatus","find","changeTaskTitle","newTitle","removeTodolist","setTodolists","todolists","tl","addTodolist","newTodolistId","newTodolist","changeTodolistTitle","todolist","changeFilter","value","todolistId1","todolistId2","padding","map","allTodolistTasks","tasksForTodolist"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,SAAkBC,QAAlB,QAAiC,YAAjC;AACA,SAAQC,EAAR,QAAiB,MAAjB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,KAAzB,QAAqC,mBAArC;;;AAcA,SAASC,GAAT,GAAe;AAAA;;AACX,WAASC,UAAT,CAAoBC,EAApB,EAAgCC,UAAhC,EAAoD;AAChD;AACD;AACC;AACAC,IAAAA,KAAK,CAACD,UAAD,CAAL,GAAoBC,KAAK,CAACD,UAAD,CAAL,CAAkBE,MAAlB,CAAyBC,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAAvC,CAApB,CAJgD,CAKhD;;AACAK,IAAAA,QAAQ,CAAC,EAAC,GAAGH;AAAJ,KAAD,CAAR;AACH;;AACD,WAASI,OAAT,CAAiBC,KAAjB,EAAgCN,UAAhC,EAAoD;AAChD,QAAIO,IAAI,GAAG;AAACR,MAAAA,EAAE,EAAER,EAAE,EAAP;AAAWe,MAAAA,KAAK,EAAEA,KAAlB;AAAyBE,MAAAA,MAAM,EAAE;AAAjC,KAAX,CADgD,CAEhD;;AACA,QAAIC,aAAa,GAAGR,KAAK,CAACD,UAAD,CAAzB,CAHgD,CAIhD;;AACAC,IAAAA,KAAK,CAACD,UAAD,CAAL,GAAoB,CAACO,IAAD,EAAO,GAAGE,aAAV,CAApB,CALgD,CAMhD;;AACAL,IAAAA,QAAQ,CAAC,EAAC,GAAGH;AAAJ,KAAD,CAAR;AACH;;AACD,WAASS,YAAT,CAAsBX,EAAtB,EAAkCS,MAAlC,EAAmDR,UAAnD,EAAuE;AACnE;AACA,QAAIS,aAAa,GAAGR,KAAK,CAACD,UAAD,CAAzB,CAFmE,CAGnE;;AACA,QAAIO,IAAI,GAAGE,aAAa,CAACE,IAAd,CAAmBR,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAAjC,CAAX,CAJmE,CAKnE;;AACA,QAAIQ,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACC,MAAL,GAAcA,MAAd,CADM,CAEN;;AACAJ,MAAAA,QAAQ,CAAC,EAAC,GAAGH;AAAJ,OAAD,CAAR;AACH;AACJ;;AACD,WAASW,eAAT,CAAyBb,EAAzB,EAAqCc,QAArC,EAAuDb,UAAvD,EAA2E;AACvE;AACA,QAAIS,aAAa,GAAGR,KAAK,CAACD,UAAD,CAAzB,CAFuE,CAGvE;;AACA,QAAIO,IAAI,GAAGE,aAAa,CAACE,IAAd,CAAmBR,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAAjC,CAAX,CAJuE,CAKvE;;AACA,QAAIQ,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACD,KAAL,GAAaO,QAAb,CADM,CAEN;;AACAT,MAAAA,QAAQ,CAAC,EAAC,GAAGH;AAAJ,OAAD,CAAR;AACH;AACJ;;AAED,WAASa,cAAT,CAAwBf,EAAxB,EAAoC;AAChC;AACAgB,IAAAA,YAAY,CAACC,SAAS,CAACd,MAAV,CAAiBe,EAAE,IAAIA,EAAE,CAAClB,EAAH,KAAUA,EAAjC,CAAD,CAAZ,CAFgC,CAGhC;;AACA,WAAOE,KAAK,CAACF,EAAD,CAAZ,CAJgC,CAId;AAClB;;AACAK,IAAAA,QAAQ,CAAC,EAAC,GAAGH;AAAJ,KAAD,CAAR;AACH;;AACD,WAASiB,WAAT,CAAqBZ,KAArB,EAAoC;AAChC,QAAIa,aAAa,GAAG5B,EAAE,EAAtB;AACA,QAAI6B,WAAyB,GAAG;AAACrB,MAAAA,EAAE,EAAEoB,aAAL;AAAoBb,MAAAA,KAAK,EAAEA,KAA3B;AAAkCJ,MAAAA,MAAM,EAAE;AAA1C,KAAhC;AACAa,IAAAA,YAAY,CAAC,CAACK,WAAD,EAAc,GAAGJ,SAAjB,CAAD,CAAZ;AACAZ,IAAAA,QAAQ,CAAC,EACL,GAAGH,KADE;AAEL,OAACkB,aAAD,GAAiB;AAFZ,KAAD,CAAR;AAIH;;AACD,WAASE,mBAAT,CAA6BtB,EAA7B,EAAyCO,KAAzC,EAAwD;AACpD;AACA,UAAMgB,QAAQ,GAAGN,SAAS,CAACL,IAAV,CAAeM,EAAE,IAAIA,EAAE,CAAClB,EAAH,KAAUA,EAA/B,CAAjB;;AACA,QAAIuB,QAAJ,EAAc;AACV;AACAA,MAAAA,QAAQ,CAAChB,KAAT,GAAiBA,KAAjB;AACAS,MAAAA,YAAY,CAAC,CAAC,GAAGC,SAAJ,CAAD,CAAZ;AACH;AACJ;;AACD,WAASO,YAAT,CAAsBC,KAAtB,EAA+CxB,UAA/C,EAAmE;AAC/D,QAAIsB,QAAQ,GAAGN,SAAS,CAACL,IAAV,CAAeM,EAAE,IAAIA,EAAE,CAAClB,EAAH,KAAUC,UAA/B,CAAf;;AACA,QAAIsB,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACpB,MAAT,GAAkBsB,KAAlB;AACAT,MAAAA,YAAY,CAAC,CAAC,GAAGC,SAAJ,CAAD,CAAZ;AACH;AACJ;;AAED,MAAIS,WAAW,GAAGlC,EAAE,EAApB;AACA,MAAImC,WAAW,GAAGnC,EAAE,EAApB;AAEA,MAAI,CAACyB,SAAD,EAAYD,YAAZ,IAA4B1B,QAAQ,CAAsB,CAC1D;AAACU,IAAAA,EAAE,EAAE0B,WAAL;AAAkBnB,IAAAA,KAAK,EAAE,eAAzB;AAA0CJ,IAAAA,MAAM,EAAE;AAAlD,GAD0D,EAE1D;AAACH,IAAAA,EAAE,EAAE2B,WAAL;AAAkBpB,IAAAA,KAAK,EAAE,aAAzB;AAAwCJ,IAAAA,MAAM,EAAE;AAAhD,GAF0D,CAAtB,CAAxC;AAKA,MAAI,CAACD,KAAD,EAAQG,QAAR,IAAoBf,QAAQ,CAAiB;AAC7C,KAACoC,WAAD,GAAe,CACX;AAAC1B,MAAAA,EAAE,EAAER,EAAE,EAAP;AAAWe,MAAAA,KAAK,EAAE,UAAlB;AAA8BE,MAAAA,MAAM,EAAE;AAAtC,KADW,EAEX;AAACT,MAAAA,EAAE,EAAER,EAAE,EAAP;AAAWe,MAAAA,KAAK,EAAE,IAAlB;AAAwBE,MAAAA,MAAM,EAAE;AAAhC,KAFW,CAD8B;AAK7C,KAACkB,WAAD,GAAe,CACX;AAAC3B,MAAAA,EAAE,EAAER,EAAE,EAAP;AAAWe,MAAAA,KAAK,EAAE,MAAlB;AAA0BE,MAAAA,MAAM,EAAE;AAAlC,KADW,EAEX;AAACT,MAAAA,EAAE,EAAER,EAAE,EAAP;AAAWe,MAAAA,KAAK,EAAE,YAAlB;AAAgCE,MAAAA,MAAM,EAAE;AAAxC,KAFW;AAL8B,GAAjB,CAAhC;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,KAAK,EAAE;AAACmB,UAAAA,OAAO,EAAC;AAAT,SAAvB;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAET;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,kBACKF,SAAS,CAACY,GAAV,CAAcX,EAAE,IAAI;AACjB,cAAIY,gBAAgB,GAAG5B,KAAK,CAACgB,EAAE,CAAClB,EAAJ,CAA5B;AACA,cAAI+B,gBAAgB,GAAGD,gBAAvB;AAEA,cAAIZ,EAAE,CAACf,MAAH,KAAc,QAAlB,EAA2B4B,gBAAgB,GAAGD,gBAAgB,CAAC3B,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACK,MAAF,KAAa,KAA1C,CAAnB;AAC3B,cAAIS,EAAE,CAACf,MAAH,KAAc,WAAlB,EAA8B4B,gBAAgB,GAAGD,gBAAgB,CAAC3B,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACK,MAAF,KAAa,IAA1C,CAAnB;AAE9B,8BAAO,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,mCACH,QAAC,KAAD;AAAO,cAAA,KAAK,EAAE;AAACmB,gBAAAA,OAAO,EAAE;AAAV,eAAd;AAAA,qCACI,QAAC,QAAD;AAEI,gBAAA,EAAE,EAAEV,EAAE,CAAClB,EAFX;AAGI,gBAAA,KAAK,EAAEkB,EAAE,CAACX,KAHd;AAII,gBAAA,KAAK,EAAEwB,gBAJX;AAKI,gBAAA,UAAU,EAAEhC,UALhB;AAMI,gBAAA,YAAY,EAAEyB,YANlB;AAOI,gBAAA,OAAO,EAAElB,OAPb;AAQI,gBAAA,gBAAgB,EAAEK,YARtB;AASI,gBAAA,MAAM,EAAEO,EAAE,CAACf,MATf;AAUI,gBAAA,cAAc,EAAEY,cAVpB;AAWI,gBAAA,eAAe,EAAEF,eAXrB;AAYI,gBAAA,mBAAmB,EAAES;AAZzB,iBACSJ,EAAE,CAAClB,EADZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,kBAAP;AAkBH,SAzBA;AADL;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuCH;;GAxIQF,G;;KAAAA,G;AA0IT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport ButtonAppBar from \"./ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n       // let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = tasks[todolistId].filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding:'20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\")tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false)\r\n                        if (tl.filter === \"completed\")tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true)\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}