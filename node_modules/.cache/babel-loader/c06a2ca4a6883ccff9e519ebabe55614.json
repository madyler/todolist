{"ast":null,"code":"var _jsxFileName = \"/home/alex/IT-INCUBATOR/todolist/src/AddItemForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AddItemForm(props) {\n  _s();\n\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState(false);\n\n  const addItem = () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title);\n      setTitle(\"\");\n    } else {\n      setError(true);\n    }\n  };\n\n  const onChangeHandler = e => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = e => {\n    setError(false);\n\n    if (e.charCode === 13) {\n      addItem();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      error: error,\n      size: \"small\",\n      label: error ? \"Title is required\" : 'Add task',\n      variant: \"outlined\",\n      value: title,\n      onChange: onChangeHandler,\n      onKeyPress: onKeyPressHandler,\n      className: error ? \"error\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: addItem,\n      style: {\n        maxWidth: '38px',\n        maxHeight: '38px',\n        minWidth: '38px',\n        minHeight: '38px'\n      },\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AddItemForm, \"NOnsDoJ6E/XRFV4VAb+EiRsKzbw=\");\n\n_c = AddItemForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddItemForm\");","map":{"version":3,"sources":["/home/alex/IT-INCUBATOR/todolist/src/AddItemForm.tsx"],"names":["React","useState","Button","TextField","AddItemForm","props","title","setTitle","error","setError","addItem","trim","onChangeHandler","e","currentTarget","value","onKeyPressHandler","charCode","maxWidth","maxHeight","minWidth","minHeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2CC,QAA3C,QAA0D,OAA1D;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,mBAAhC;;AAOA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAkD;AAAA;;AAErD,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAU,KAAV,CAAhC;;AAEA,QAAMS,OAAO,GAAG,MAAM;AAClB,QAAIJ,KAAK,CAACK,IAAN,OAAiB,EAArB,EAAyB;AACrBN,MAAAA,KAAK,CAACK,OAAN,CAAcJ,KAAd;AACAC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAPD;;AASA,QAAMG,eAAe,GAAIC,CAAD,IAAsC;AAC1DN,IAAAA,QAAQ,CAACM,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAR;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,CAAD,IAAwC;AAC9DJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;;AACA,QAAII,CAAC,CAACI,QAAF,KAAe,EAAnB,EAAuB;AACnBP,MAAAA,OAAO;AACV;AACJ,GALD;;AAOA,sBAAO;AAAA,4BAQH,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,gBAAd;AACW,MAAA,KAAK,EAAEF,KADlB;AAEW,MAAA,IAAI,EAAC,OAFhB;AAGW,MAAA,KAAK,EAAEA,KAAK,GAAG,mBAAH,GAAyB,UAHhD;AAIW,MAAA,OAAO,EAAC,UAJnB;AAKW,MAAA,KAAK,EAAEF,KALlB;AAMW,MAAA,QAAQ,EAAEM,eANrB;AAOW,MAAA,UAAU,EAAEI,iBAPvB;AAQW,MAAA,SAAS,EAAER,KAAK,GAAG,OAAH,GAAa;AARxC;AAAA;AAAA;AAAA;AAAA,YARG,eAoBH,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAEE,OAArC;AACQ,MAAA,KAAK,EAAE;AAACQ,QAAAA,QAAQ,EAAE,MAAX;AAAmBC,QAAAA,SAAS,EAAE,MAA9B;AAAsCC,QAAAA,QAAQ,EAAE,MAAhD;AAAwDC,QAAAA,SAAS,EAAE;AAAnE,OADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAyBH;;GAlDejB,W;;KAAAA,W","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {/*<input */}\r\n        {/*    value={title}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*       onKeyPress={onKeyPressHandler}*/}\r\n        {/*       className={error ? \"error\" : \"\"}*/}\r\n        {/*/>*/}\r\n\r\n        <TextField id=\"outlined-basic\"\r\n                   error={error}\r\n                   size=\"small\"\r\n                   label={error ? \"Title is required\" : 'Add task'}\r\n                   variant=\"outlined\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n        />\r\n\r\n        {/*<button onClick={addItem}>+</button>*/}\r\n        <Button variant=\"contained\" onClick={addItem}\r\n                style={{maxWidth: '38px', maxHeight: '38px', minWidth: '38px', minHeight: '38px'}}>+</Button>\r\n\r\n        {/*{error && <div className=\"error-message\">Title is required</div>}*/}\r\n    </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}